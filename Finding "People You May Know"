import json

def load_data(filename):
    try:
        with open(filename, "r") as file:
            data = json.load(file)
            if "users" not in data:
                raise ValueError("JSON data must contain a 'users' key.")
            return data
    except Exception as e:
        print(f"Error loading data: {e}")
        return None

def find_people_you_may_know(user_id, data, id_field="id", friends_field="friends"):
    user_friends = {}

    # Validate and prepare the friend mapping
    for user in data.get("users", []):
        uid = user.get(id_field)
        friends = user.get(friends_field, [])

        if uid is None or not isinstance(friends, list):
            continue  # Skip malformed entries

        user_friends[uid] = set(friends)

    if user_id not in user_friends:
        print(f"User ID {user_id} not found in data.")
        return []

    direct_friends = user_friends[user_id]
    suggestions = {}

    for friend in direct_friends:
        for mutual in user_friends.get(friend, []):
            if mutual != user_id and mutual not in direct_friends:
                suggestions[mutual] = suggestions.get(mutual, 0) + 1

    sorted_suggestions = sorted(suggestions.items(), key=lambda x: x[1], reverse=True)
    return [uid for uid, _ in sorted_suggestions]

# Example usage
if __name__ == "__main__":
    data = load_data("cleaned_codebook_data.json")
    if data:
        user_id = 1  # Change this to test different users
        recommendations = find_people_you_may_know(user_id, data)
        print(f"People You May Know for User {user_id}: {recommendations}")
